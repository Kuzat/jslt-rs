name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache Java JSLT build
      uses: actions/cache@v3
      with:
        path: conformance/java-jslt/core/build
        key: ${{ runner.os }}-java-jslt-${{ hashFiles('conformance/java-jslt/**/*.gradle*', 'conformance/java-jslt/**/gradle-wrapper.properties') }}
    
    - name: Install jq (for test fixture validation)
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update && sudo apt-get install -y jq
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install jq
        elif [ "$RUNNER_OS" == "Windows" ]; then
          choco install jq
        fi
      shell: bash
    
    - name: Build Java JSLT
      run: |
        cd conformance/java-jslt
        ./gradlew :core:shadowJar --no-daemon
      shell: bash
    
    - name: Validate test fixtures
      run: ./conformance/scripts/validate_fixtures.sh
      shell: bash
    
    - name: Test Java JSLT setup
      run: ./conformance/scripts/test_java_jslt.sh
      shell: bash
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run Clippy
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings
    
    - name: Run tests
      run: cargo test --workspace
    
    - name: Run differential tests (when Rust implementation is ready)
      run: cargo test -p engine --test conformance_tests -- --ignored
      continue-on-error: true  # Allow this to fail until Rust implementation is complete